language: bash

services:
  - docker

env:
  - BASE_IMAGE=library/python QEMU_ARCH=x86_64 TAG_SUFFIX="amd64"
  - BASE_IMAGE=arm64v8/python QEMU_ARCH=aarch64 TAG_SUFFIX="aarch64"

script:
  # Setup multi-arch support
  - sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
  - docker run --rm --privileged multiarch/qemu-user-static:register --reset

  # Generate arch-specific image tags
  - export TARGET_IMAGE_TAG=$(if [ "$TRAVIS_BRANCH" = "master" ]; then if [ "$TAG_SUFFIX" = "" ]; then echo "latest"; else echo "$TAG_SUFFIX"; fi; else if [ "$TAG_SUFFIX" = "" ]; then echo "$TRAVIS_BRANCH"; else echo "$TRAVIS_BRANCH-$TAG_SUFFIX"; fi; fi)

  # Pull existing image to use as the build cache
  - docker pull $TARGET_IMAGE:$TARGET_IMAGE_TAG && export IMAGE_CACHE="--cache-from $TARGET_IMAGE:$TARGET_IMAGE_TAG" || export IMAGE_CACHE=""
  
  # Build the image, login to Docker Hub and push.
  - docker build $IMAGE_CACHE --build-arg BASE_IMAGE=${BASE_IMAGE} --build-arg QEMU_ARCH=${QEMU_ARCH} -t $TARGET_IMAGE:$TARGET_IMAGE_TAG .
  - echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker push $TARGET_IMAGE:$TARGET_IMAGE_TAG

jobs:
  include:
    - stage: manifest
      script:
        # Enable experimental features to use docker manifest command
        - mkdir $HOME/.docker
        - |-
          echo '{"experimental": "enabled"}' | tee $HOME/.docker/config.json
        - |-
          echo '{"experimental": true,"storage-driver": "overlay2","max-concurrent-downloads": 50,"max-concurrent-uploads": 50}' | sudo tee /etc/docker/daemon.json
        - sudo service docker restart

        # login to Docker Hub
        - echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

        # Create the manifest
        - export MANIFEST_SUFFIX=$(if [ "$TRAVIS_BRANCH" = "master" ]; then echo "latest"; else echo "$TRAVIS_BRANCH"; fi)
        - export TAG_PREFIX=$(if [ "$TRAVIS_BRANCH" = "master" ]; then echo ""; else echo "$TRAVIS_BRANCH-"; fi)
        - docker manifest create $TARGET_IMAGE:$MANIFEST_SUFFIX $TARGET_IMAGE:${TAG_PREFIX}amd64 $TARGET_IMAGE:${TAG_PREFIX}aarch64
        - docker manifest annotate $TARGET_IMAGE:$MANIFEST_SUFFIX $TARGET_IMAGE:${TAG_PREFIX}aarch64 --os=linux --arch=arm64 --variant=v8
        - docker manifest push $TARGET_IMAGE:$MANIFEST_SUFFIX